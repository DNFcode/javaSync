package javasync;

import java.util.HashSet;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import remote.SyncClient;
import remote.SyncServer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author dnf
 */
public class MainJFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        RMIPortText = new javax.swing.JTextField();
        RMIPortLabel = new javax.swing.JLabel();
        TCPPortLabel = new javax.swing.JLabel();
        TCPPortText = new javax.swing.JTextField();
        ServerRadioButton = new javax.swing.JRadioButton();
        IPLabel = new javax.swing.JLabel();
        IPText = new javax.swing.JTextField();
        Folder1Label = new javax.swing.JLabel();
        Folder2Label = new javax.swing.JLabel();
        Folder2Text = new javax.swing.JTextField();
        Folder1Text = new javax.swing.JTextField();
        ProgressBar = new javax.swing.JProgressBar();
        ProgressBarLabel = new javax.swing.JLabel();
        StartButton = new javax.swing.JButton();
        LocalRadioButton = new javax.swing.JRadioButton();
        ClientRadioButton = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        RMIPortText.setEnabled(false);
        RMIPortText.setName("RMItext"); // NOI18N

        RMIPortLabel.setText("RMI port");

        TCPPortLabel.setText("TCP port");

        TCPPortText.setEnabled(false);

        buttonGroup.add(ServerRadioButton);
        ServerRadioButton.setText("Server");
        ServerRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ServerRadioButtonActionPerformed(evt);
            }
        });

        IPLabel.setText("host IP");

        IPText.setToolTipText("");
        IPText.setEnabled(false);

        Folder1Label.setText("First folder");

        Folder2Label.setText("Second folder");

        StartButton.setText("Start");
        StartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartButtonActionPerformed(evt);
            }
        });

        buttonGroup.add(LocalRadioButton);
        LocalRadioButton.setSelected(true);
        LocalRadioButton.setText("Local");
        LocalRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LocalRadioButtonActionPerformed(evt);
            }
        });

        buttonGroup.add(ClientRadioButton);
        ClientRadioButton.setText("Client");
        ClientRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClientRadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ProgressBarLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RMIPortLabel)
                            .addComponent(TCPPortLabel)
                            .addComponent(IPLabel)
                            .addComponent(LocalRadioButton))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(TCPPortText, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                                    .addComponent(RMIPortText)
                                    .addComponent(IPText))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(Folder2Label)
                                    .addComponent(Folder1Label))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(Folder2Text, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                                    .addComponent(Folder1Text)))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ClientRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ServerRadioButton)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(StartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ServerRadioButton)
                    .addComponent(LocalRadioButton)
                    .addComponent(ClientRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RMIPortText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RMIPortLabel)
                    .addComponent(Folder1Label)
                    .addComponent(Folder1Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TCPPortLabel)
                    .addComponent(TCPPortText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Folder2Label)
                    .addComponent(Folder2Text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IPText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IPLabel))
                .addGap(18, 18, 18)
                .addComponent(ProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ProgressBarLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 10, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(StartButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ServerRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ServerRadioButtonActionPerformed
        if(ServerRadioButton.isSelected()){
            IPText.setEnabled(false);
            Folder1Text.setEnabled(false);
            Folder2Text.setEnabled(false);
            RMIPortText.setEnabled(true);
            TCPPortText.setEnabled(true);
        }
    }//GEN-LAST:event_ServerRadioButtonActionPerformed

    private void ClientRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClientRadioButtonActionPerformed
        if(ClientRadioButton.isSelected()){
            IPText.setEnabled(true);
            Folder1Text.setEnabled(true);
            Folder1Label.setText("Local folder");
            Folder2Text.setEnabled(true);
            Folder2Label.setText("Remote folder");
            RMIPortText.setEnabled(true);
            TCPPortText.setEnabled(true);
        }
    }//GEN-LAST:event_ClientRadioButtonActionPerformed

    private void LocalRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LocalRadioButtonActionPerformed
        if(LocalRadioButton.isSelected()){
            IPText.setEnabled(false);
            Folder1Text.setEnabled(true);
            Folder1Label.setText("First folder");
            Folder2Text.setEnabled(true);
            Folder2Label.setText("Second folder");
            RMIPortText.setEnabled(false);
            TCPPortText.setEnabled(false);
        }
    }//GEN-LAST:event_LocalRadioButtonActionPerformed

    private void StartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartButtonActionPerformed
        try{
            ProgressBar.setValue(0);
            if(LocalRadioButton.isSelected()){
                String folder1 = Folder1Text.getText();
                String folder2 = Folder2Text.getText();
                HashSet<javasync.FileInfo> folderInfo1 = javasync.Data.getFolderInfo(folder1);
                HashSet<javasync.FileInfo> folderInfo2 = javasync.Data.getFolderInfo(folder2);
                Thread syncThread = new Thread(new javasync.Sync(folderInfo1, folderInfo2, folder1, folder2, true, this));
                syncThread.start();
            }else if(ClientRadioButton.isSelected()){
                String folder1 = Folder1Text.getText();
                String folder2 = Folder2Text.getText();
                String IP = IPText.getText();
                int RMIport = Integer.parseInt(RMIPortText.getText());
                int TCPport = Integer.parseInt(TCPPortText.getText());
                SyncClient client = new SyncClient();
                client.start(IP, RMIport, TCPport, folder1, folder2, this);
            }else if(ServerRadioButton.isSelected()){
                int RMIport = Integer.parseInt(RMIPortText.getText());
                int TCPport = Integer.parseInt(TCPPortText.getText());
                SyncServer serv = new SyncServer();
                serv.start(RMIport, TCPport, this);
            }
        }catch(Exception ex){
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_StartButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        String XMLsettingsFile = "settings.xml";
        try{
            Properties xml = XML.getLaunchInfo(XMLsettingsFile);
            RMIPortText.setText((String)xml.get("RMI_port"));
            TCPPortText.setText((String)xml.get("TCP_port"));
            Folder1Text.setText((String)xml.get("folder_1"));
            Folder2Text.setText((String)xml.get("folder_2"));
            IPText.setText((String)xml.get("host_IP"));
            String type = (String)xml.get("type");
            if(type.equals("client")){
                buttonGroup.setSelected(ClientRadioButton.getModel(), true);
                IPText.setEnabled(true);
                Folder1Text.setEnabled(true);
                Folder1Label.setText("Local folder");
                Folder2Text.setEnabled(true);
                Folder2Label.setText("Remote folder");
                RMIPortText.setEnabled(true);
                TCPPortText.setEnabled(true);
            }
            if(type.equals("server")){
                buttonGroup.setSelected(ServerRadioButton.getModel(), true);
                IPText.setEnabled(false);
                Folder1Text.setEnabled(false);
                Folder2Text.setEnabled(false);
                RMIPortText.setEnabled(true);
                TCPPortText.setEnabled(true);
            } 
        }catch(Exception ex){
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Data.infoFileName = ".folder_info";
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton ClientRadioButton;
    private javax.swing.JLabel Folder1Label;
    private javax.swing.JTextField Folder1Text;
    private javax.swing.JLabel Folder2Label;
    private javax.swing.JTextField Folder2Text;
    private javax.swing.JLabel IPLabel;
    private javax.swing.JTextField IPText;
    private javax.swing.JRadioButton LocalRadioButton;
    public javax.swing.JProgressBar ProgressBar;
    public javax.swing.JLabel ProgressBarLabel;
    private javax.swing.JLabel RMIPortLabel;
    private javax.swing.JTextField RMIPortText;
    private javax.swing.JRadioButton ServerRadioButton;
    private javax.swing.JButton StartButton;
    private javax.swing.JLabel TCPPortLabel;
    private javax.swing.JTextField TCPPortText;
    private javax.swing.ButtonGroup buttonGroup;
    // End of variables declaration//GEN-END:variables
}
